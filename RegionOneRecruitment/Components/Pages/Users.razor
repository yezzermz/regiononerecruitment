@page "/users"
@using Microsoft.EntityFrameworkCore
@using RegionOneRecruitment.Models
@using RegionOneRecruitment.DBContext
@inject IDbContextFactory<DataContext> UserDataContextFactory;

<PageTitle>Registered Users</PageTitle>

<h1>Registered Users</h1>

@if (AllUsers is not null && AllUsers.Count > 0)
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var user in AllUsers)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@user.FirstName @user.LastName</h5>
                        <h6 class="card-subtitle mb-2 text-muted">ID: @user.UserId</h6>
                        @if (!EditRecord || (UserToUpdate is null || UserToUpdate.UserId != user.UserId))
                        {
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"><strong>Email:</strong> @user.Email</li>
                                <li class="list-group-item"><strong>Phone:</strong> @user.Phone</li>
                                <li class="list-group-item"><strong>Job Interests:</strong> @user.JobInterests</li>
                                <li class="list-group-item"><strong>Password:</strong> @user.Password</li>
                                <li class="list-group-item"><strong>Admin:</strong> @user.IsAdmin</li>
                            </ul>
                        }
                        else
                        {
                            <div class="mb-3">
                                <input @bind="user.FirstName" class="form-control mb-2" placeholder="First Name" />
                                <input @bind="user.LastName" class="form-control mb-2" placeholder="Last Name" />
                                <input @bind="user.Email" class="form-control mb-2" placeholder="Email" />
                                <input @bind="user.Phone" class="form-control mb-2" placeholder="Phone" />
                                <input @bind="user.JobInterests" class="form-control mb-2" placeholder="Job Interests" />
                                <input @bind="user.Password" class="form-control mb-2" placeholder="Password" />
                                <div class="form-check mb-2">
                                    <input @bind="UserToUpdate.IsAdmin" class="form-check-input" type="checkbox" id="@($"isAdmin{user.UserId}")" />
                                    <label class="form-check-label" for="@($"isAdmin{user.UserId}")">Is Admin</label>
                                </div>
                                <InputFile OnChange="HandleResumeUpload" accept=".pdf" class="form-control mb-2" />
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        @if (!EditRecord || (UserToUpdate is null || UserToUpdate.UserId != user.UserId))
                        {
                            <button name="view pdf" type="button" class="btn btn-secondary pdf-button" data-pdfbytes="@Convert.ToBase64String(user.ResumeBytes ?? Array.Empty<byte>())">View Resume</button>
                            <button @onclick="() => ShowEditForm(user)" class="btn btn-primary">Edit</button>
                        }
                        else
                        {
                            <button @onclick="CancelEdit" class="btn btn-secondary me-2">Cancel</button>
                            <button @onclick="@UpdateUser" class="btn btn-primary me-2">Save</button>
                            <button @onclick="() => DeleteUser(user.UserId)" class="btn btn-danger">Delete</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <h3>No Users Available</h3>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.body.addEventListener('click', function (e) {
            if (e.target && e.target.classList.contains('pdf-button')) {
                // Get the Base64 encoded PDF bytes from the data attribute
                var base64Data = e.target.getAttribute('data-pdfbytes');

                // Convert Base64 to binary string
                var byteCharacters = atob(base64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }

                // Create a Blob from the binary data
                var blob = new Blob([new Uint8Array(byteNumbers)], { type: 'application/pdf' });

                // Create a link element to open the Blob in a new tab
                var link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.target = '_blank'; // Open in new tab
                link.click();
            }
        });
    });
</script>
